# Riepilogo Dettagliato del Progetto AI Style Studio

Questo documento fornisce una panoramica esaustiva di tutte le funzionalità, le configurazioni e le modifiche implementate nel progetto AI Style Studio. Include dettagli tecnici, percorsi dei file e spiegazioni sull'interazione tra i vari componenti, rendendolo ideale per la documentazione, il debug o la riproduzione delle impostazioni in un nuovo ambiente.

---

## 1. Architettura e Tecnologie Principali

*   **Framework:** React (con TypeScript)
*   **Routing:** React Router DOM (`src/App.tsx`)
*   **Stilizzazione:** Tailwind CSS (`tailwind.config.ts`, `src/globals.css`)
*   **Componenti UI:** shadcn/ui (basato su Radix UI)
*   **Gestione Stato Globale/Impostazioni:** Custom React Context (`src/context/SettingsContext.tsx`)
*   **Internazionalizzazione (i18n):** `i18next` e `react-i18next` (`src/i18n.ts`, `src/locales/`)
*   **Notifiche Toast:** `sonner` (integrato con suoni personalizzati)
*   **Gestione Query:** `@tanstack/react-query`
*   **Ambiente Desktop:** Electron (`main.js`, `preload.js`, `vite.config.ts`, `package.json`)
*   **Utility:** `clsx` e `tailwind-merge` per classi CSS (`src/lib/utils.ts`)

---

## 2. Gestione delle Impostazioni Globali (`src/context/SettingsContext.tsx`)

Questo è il cuore della persistenza e della reattività delle impostazioni dell'applicazione.

*   **File:** `src/context/SettingsContext.tsx`
*   **Interfaccia `Settings`:** Definisce tutte le impostazioni configurabili, tra cui:
    *   `quickColor: string`
    *   `gradientColor: string`
    *   `appOpacity: number`
    *   `cardOpacity: number`
    *   `blurEffect: string`
    *   `cardAnimation: string` (non più usato direttamente, sostituito da `entryAnimation` e `exitAnimation`)
    *   `entryAnimation: string` (nuovo)
    *   `exitAnimation: string` (nuovo)
    *   `illuminationColor: string`
    *   `illuminationStrength: number`
    *   `hoverSoundEnabled: boolean`
    *   `clickSoundEnabled: boolean`
    *   `popupOpenSoundEnabled: boolean`
    *   `popupCloseSoundEnabled: boolean`
    *   `notificationSoundEnabled: boolean`
    *   `messageSentSoundEnabled: boolean`
    *   `menuOpenSoundEnabled: boolean`
    *   `menuCloseSoundEnabled: boolean`
    *   `successSoundEnabled: boolean`
    *   `errorSoundEnabled: boolean`
    *   `warningSoundEnabled: boolean`
    *   `language: string`
    *   `theme: 'light' | 'dark'`
    *   `compactMode: boolean`
    *   `performanceMode: boolean`
    *   `customAccentColor: string`
    *   `cardBackgroundEffect: 'none' | 'quickColor' | 'gradient'`
    *   `customQuickColor: string`
    *   `customGradient: string`
    *   `customSounds: { [key: string]: string }` (nuovo, per suoni Base64)
    *   `savedThemes: ThemePreset[]` (per salvare preset di temi/animazioni/illuminazione)
*   **`defaultSettings`:** Oggetto con i valori iniziali di tutte le impostazioni.
*   **Persistenza:** Le impostazioni vengono salvate in `localStorage` sotto la chiave `'aiStyleStudioSettings'` ogni volta che vengono aggiornate (`useEffect`).
*   **Applicazione Iniziale:** Al caricamento, il contesto legge le impostazioni da `localStorage` e applica immediatamente il tema (`dark` class a `document.documentElement`) e il colore d'accento personalizzato (`--custom-accent` CSS variable).
*   **Metodi:**
    *   `updateSetting(key, value)`: Aggiorna una singola impostazione.
    *   `saveThemePreset(name)`: Salva le impostazioni correnti (colori, gradienti, blur, animazioni, illuminazione, tema, accento, sfondo card, colori/gradienti custom) come un preset.
    *   `loadThemePreset(name)`: Carica un preset salvato, applicando le sue impostazioni.
    *   `deleteThemePreset(name)`: Elimina un preset salvato.
    *   `resetSettings()`: Ripristina tutte le impostazioni ai valori predefiniti e ricarica la pagina.

---

## 3. Layout e Navigazione

### `src/App.tsx`
*   Configura `QueryClientProvider`, `TooltipProvider`, `Toaster` (shadcn/ui) e `Sonner` (per i toast).
*   Utilizza `BrowserRouter` per la gestione delle rotte.
*   Avvolge l'intero `Layout` con `SettingsProvider` per rendere le impostazioni disponibili globalmente.
*   Definisce tutte le `Routes` dell'applicazione, inclusi i percorsi per le impostazioni e le categorie di vestiti.

### `src/components/Layout.tsx`
*   **Ruolo:** Componente wrapper principale per l'intera applicazione.
*   **Sfondo Dinamico:** Applica classi CSS di sfondo (`bg-gradient-to-br`, `bg-blue-500`, ecc.) o stili inline (`background`, `backgroundColor`) basati su `settings.gradientColor`, `settings.customGradient`, `settings.quickColor` e `settings.customQuickColor`.
*   **Opacità App:** Applica l'opacità generale dell'app tramite classi Tailwind dinamiche (es. `bg-opacity-80`) basate su `settings.appOpacity`.
*   Include `Navbar` e `MadeWithDyad`.

### `src/components/Navbar.tsx`
*   **Posizione:** Barra di navigazione fissa in alto.
*   **Sfondo Dinamico:** Lo sfondo della navbar segue le stesse logiche di colore/gradiente dell'app, ma con classi leggermente diverse per i colori rapidi (es. `bg-blue-600` invece di `bg-blue-500` per un contrasto maggiore).
*   **`NavItem`:** Componente riutilizzabile per i link di navigazione.
    *   **Stato Attivo:** Utilizza `location.pathname` per determinare se un link è attivo.
    *   **Colore Accento:** Se `settings.customAccentColor` è definito, usa `bg-[var(--custom-accent)]` per lo stato attivo, altrimenti `bg-primary`.
    *   **Icone:** Utilizza icone da `lucide-react`.
    *   **Tooltip:** Fornisce tooltip per ogni icona di navigazione.

---

## 4. Componente Card Dinamica (`src/components/DynamicCard.tsx`)

Questo componente è fondamentale per applicare in modo coerente le impostazioni visive a tutte le card dell'applicazione.

*   **File:** `src/components/DynamicCard.tsx`
*   **Proprietà:** Estende `CardProps` di shadcn/ui, aggiunge `disableHoverSound`, `disableClickSound`.
*   **Opacità Card:** Applica `opacity: settings.cardOpacity / 100` tramite stile inline.
*   **Effetto Sfocatura:** Applica `filter: blur(...)` tramite stile inline, basato su `settings.blurEffect` (disabilitato in `performanceMode`).
*   **Effetto Illuminazione (Glow):**
    *   Calcola `boxShadow` dinamicamente in base a `settings.illuminationColor` (mappato a valori HEX tramite `getIlluminationColorValue`) e `settings.illuminationStrength`.
    *   Disabilitato in `performanceMode`.
*   **Sfondo Card Dinamico:**
    *   Basato su `settings.cardBackgroundEffect` (`none`, `quickColor`, `gradient`).
    *   Se `quickColor` o `gradient` sono selezionati, la card adotta lo sfondo dell'app (colore rapido o gradiente, inclusi i custom).
    *   Utilizza classi Tailwind o stili inline (`backgroundColor`, `background`) a seconda della configurazione.
*   **Animazioni:** Applica `animate-${settings.entryAnimation}` come classe Tailwind per l'animazione di entrata (disabilitato in `performanceMode`).
*   **Suoni Interattivi:**
    *   `onMouseEnter`: Riproduce `hoverSound` se `settings.hoverSoundEnabled` è `true` e `disableHoverSound` è `false`.
    *   `onClick`: Riproduce `clickSound` se `settings.clickSoundEnabled` è `true` e `disableClickSound` è `false`.
    *   I file audio sono precaricati come oggetti `Audio` in questo componente.

---

## 5. Impostazioni Visive Dettagliate

### 5.1. Tema (Modalità Chiaro/Scuro)
*   **Controllo:** `src/pages/Settings.tsx` (Switch `theme-switch`).
*   **Logica:** `SettingsContext.tsx` aggiunge/rimuove la classe `dark` dall'elemento `document.documentElement`.
*   **CSS:** `src/globals.css` definisce le variabili CSS (`--background`, `--foreground`, `--primary`, ecc.) per `:root` (chiaro) e `.dark` (scuro).

### 5.2. Colore Accento Personalizzato
*   **Controllo:** `src/pages/AdvancedSettings.tsx` (Input per HEX, pulsante "Applica").
*   **Logica:** `SettingsContext.tsx` imposta la variabile CSS `--custom-accent` su `document.documentElement.style`.
*   **CSS:** `src/globals.css` definisce `--custom-accent: var(--primary);` come default.
*   **Utilizzo:** `src/components/Navbar.tsx` usa `bg-[var(--custom-accent)]` per i `NavItem` attivi.

### 5.3. Colori Rapidi (`src/pages/QuickColorSettings.tsx`)
*   **Opzioni Predefinite:** 26 colori, mappati a classi Tailwind (es. `bg-blue-500`).
*   **Colore Personalizzato:** Input `type="color"` e `type="text"` per inserire/selezionare un colore HEX (es. `#FF0000`).
    *   Validazione HEX di base.
    *   Il valore viene salvato in `settings.customQuickColor`.
*   **Componente `ColorOption`:** Visualizza campioni di colore (dimensioni 20x20px).
*   **Interazione:** La selezione di un colore rapido resetta il gradiente (`gradientColor` a `none`).
*   **Sfondo Card:** Radio group per `settings.cardBackgroundEffect` (`none`, `quickColor`, `gradient`).

### 5.4. Gradienti (`src/pages/ColorGradientSettings.tsx`)
*   **Opzioni Predefinite:** 26 gradienti, mappati a classi Tailwind (es. `bg-gradient-to-br from-orange-400 to-red-500`).
*   **Gradiente Personalizzato:** Input `type="text"` per inserire una stringa CSS di gradiente (es. `linear-gradient(to right, #ff0000, #0000ff)`).
    *   Validazione di base per la stringa CSS.
    *   Il valore viene salvato in `settings.customGradient`.
*   **Componente `GradientOption`:** Visualizza campioni di gradiente (dimensioni 20x20px).
*   **Interazione:** La selezione di un gradiente resetta il colore rapido (`quickColor` a `default`).

### 5.5. Effetti Sfocatura (`src/pages/BlurEffectSettings.tsx`)
*   **Opzioni:** `none`, `light`, `medium`, `heavy`.
*   **Classi CSS:** `src/globals.css` definisce le classi `.blur-none`, `.blur-light`, `.blur-medium`, `.blur-heavy` con `filter: blur(...)`.
*   **Anteprima:** Una `Card` di anteprima mostra l'effetto in tempo reale.
*   **Applicazione:** `DynamicCard.tsx` applica il `filter` CSS basato su `settings.blurEffect`.

### 5.6. Trasparenza (`src/pages/TransparencySettings.tsx`)
*   **Opacità App:** Slider (`min={0}`, `max={100}`, `step={10}`).
    *   `Layout.tsx` applica `bg-opacity-${Math.round(settings.appOpacity / 10) * 10}`.
*   **Opacità Card:** Slider (`min={0}`, `max={100}`, `step={1}`).
    *   `DynamicCard.tsx` applica `opacity: settings.cardOpacity / 100` tramite stile inline.

### 5.7. Illuminazione (`src/pages/IlluminationSettings.tsx`)
*   **Colori Predefiniti:** 22 opzioni, mappate a classi Tailwind (es. `bg-gray-400`) per i campioni e a valori HEX (tramite `getIlluminationColorValue` helper) per il calcolo del glow.
*   **Intensità:** Slider (`min={0}`, `max={100}`, `step={1}`).
*   **Effetto Glow:** `DynamicCard.tsx` calcola e applica `boxShadow` con `blur` e `spread` dinamici basati su `illuminationStrength` e `illuminationColorHex`.
*   **Anteprima:** Una `Card` e un `Button` di anteprima mostrano l'effetto glow in tempo reale.

### 5.8. Animazioni (`src/pages/AnimationSettings.tsx`)
*   **Animazioni di Entrata (11 tipi):** `fade-in`, `scale-up`, `rotate-in`, `slide-in-left`, `slide-in-right`, `zoom-in`, `bounce-in`, `flip-in`, `grow-in`, `swing-in`.
*   **Animazioni di Uscita (10 tipi):** `fade-out`, `scale-down`, `slide-out-left`, `slide-out-right`, `zoom-out`, `bounce-out`, `flip-out`, `shrink-out`, `hinge-out`.
*   **Definizioni:** `tailwind.config.ts` contiene le definizioni `keyframes` e `animation` per tutte queste animazioni.
*   **Classi CSS:** `src/globals.css` definisce le classi `animate-fade-in`, `animate-scale-up`, ecc.
*   **Applicazione:** `DynamicCard.tsx` applica `animate-${settings.entryAnimation}`.
*   **Anteprima:** Il componente `AnimationOptionCard` permette di testare ogni animazione singolarmente.

---

## 6. Impostazioni Audio Dettagliate (`src/pages/AudioSettings.tsx`)

*   **File:** `src/pages/AudioSettings.tsx`
*   **Suoni Predefiniti (11 tipi):**
    *   `hover`, `click`, `popupOpen`, `popupClose`, `notification`, `messageSent`, `menuOpen`, `menuClose`, `success`, `error`, `warning`.
    *   **File Audio:** Tutti i file `.mp3` si trovano in `public/sounds/`.
    *   **Precaricamento:** Gli oggetti `HTMLAudioElement` sono creati una volta all'inizio del componente e riutilizzati.
    *   **Controllo:** Ogni suono ha un `Switch` per attivarlo/disattivarlo (`settings.hoverSoundEnabled`, ecc.) e un `Button` "Play" per l'anteprima.
*   **Suoni Personalizzati:**
    *   **Caricamento:** Input `type="file"` (`accept="audio/*"`) per caricare file audio.
    *   **Conversione:** `FileReader` legge il file e lo converte in una stringa Base64.
    *   **Salvataggio:** Il suono Base64 e il suo nome vengono salvati in `settings.customSounds` (un oggetto `{ [key: string]: string }`).
    *   **Riproduzione:** I suoni personalizzati vengono riprodotti creando un nuovo `Audio` object con la stringa Base64.
    *   **Eliminazione:** Pulsante "Trash2" per rimuovere i suoni personalizzati.
*   **Integrazione con Toast (`src/utils/toast.ts`):**
    *   La funzione `playSound` in `src/utils/toast.ts` ora utilizza `useSettings()` per verificare se i suoni di `success`, `error`, `warning`, `notification` sono abilitati prima di riprodurli.
    *   Questo assicura che i suoni dei toast rispettino le impostazioni utente.

---

## 7. Profilo Utente (`src/pages/Profile.tsx`)

*   **File:** `src/pages/Profile.tsx`
*   **Interfaccia `UserProfile`:** Definisce la struttura dei dati del profilo.
*   **Persistenza:** Il profilo utente viene salvato in `localStorage` sotto la chiave `'userProfile'`.
*   **Campi Modificabili:**
    *   `name`, `nickname`, `email`, `bio` (Input e Textarea).
    *   `status`: `Select` con opzioni predefinite (Online, Occupato, Assente, Invisibile, In Sessione AI, Creazione in Corso) e icone `lucide-react` (`CircleCheck`, `CircleDot`, ecc.).
*   **Avatar:**
    *   `Avatar` di shadcn/ui.
    *   **Caricamento:** Input `type="file"` nascosto, attivato da un `Button`. `FileReader` converte l'immagine in Data URL (`avatarUrl`).
    *   **Eliminazione:** Ripristina `avatarUrl` a `/placeholder.svg`.
*   **Visualizzazione Nome Utente nella Home:** `src/pages/Index.tsx` legge `userProfile.name` da `localStorage` per il messaggio di benvenuto.
*   **Log Attività e Badge:** Sezioni per visualizzare attività recenti e badge.

---

## 8. Impostazioni Avanzate (`src/pages/AdvancedSettings.tsx`)

*   **File:** `src/pages/AdvancedSettings.tsx`
*   **Modalità Compatta:** `Switch` per `settings.compactMode`.
    *   Quando abilitata, la classe `max-w-2xl` viene applicata al `div` principale di alcune pagine (es. `Index.tsx`, `Settings.tsx`, `AdvancedSettings.tsx`) per ridurre la larghezza del contenuto.
*   **Modalità Prestazioni:** `Switch` per `settings.performanceMode`.
    *   Quando abilitata, `DynamicCard.tsx` disabilita gli effetti di sfocatura e illuminazione (glow) per migliorare le prestazioni.
*   **Esportazione Impostazioni:**
    *   Pulsante "Esporta Impostazioni".
    *   Salva il contenuto di `localStorage.getItem('aiStyleStudioSettings')` come file `.json`.
*   **Importazione Impostazioni:**
    *   Input `type="file"` nascosto, attivato da un `Button`.
    *   Legge un file `.json`, lo parsa e lo salva in `localStorage`.
    *   **Ricaricamento:** Dopo l'importazione, `window.location.reload()` viene chiamato per applicare immediatamente le nuove impostazioni.

---

## 9. Pagine di Contenuto e Localizzazione

### Pagine di Contenuto (es. `src/pages/AIStylist.tsx`, `src/pages/Preferiti.tsx`, `src/pages/Vestiti.tsx`, `src/pages/TopsShirts.tsx`, ecc.)
*   Tutte le pagine utilizzano `DynamicCard` per mantenere una coerenza visiva con le impostazioni globali.
*   Fanno ampio uso di `useTranslation()` per il testo localizzato.

### Localizzazione (`src/i18n.ts`, `src/locales/`)
*   **File:** `src/i18n.ts` configura `i18next`.
*   **Risorse:** I file di traduzione si trovano in `src/locales/en/translation.json`, `src/locales/it/translation.json`, ecc.
*   **Lingue Supportate:** Italiano (`it`), Inglese (`en`), Francese (`fr`), Tedesco (`de`), Spagnolo (`es`), Portoghese (`pt`).
*   **Lingua Iniziale:** `getInitialLanguage()` legge la lingua da `localStorage` o usa `it` come default.
*   **`I18nextProvider`:** Avvolge l'intera `App` in `src/main.tsx`.

---

## 10. File di Configurazione e Utilità

### `tailwind.config.ts`
*   **`darkMode: ["class"]`:** Abilita il dark mode tramite la classe `dark` sull'elemento `html`.
*   **`content`:** Include tutti i percorsi dei file `.ts`, `.tsx` per la scansione delle classi Tailwind.
*   **`extend.colors`:** Definisce i colori base e i colori specifici per la sidebar, utilizzando variabili CSS (es. `hsl(var(--background))`).
*   **`extend.keyframes`:** Definisce tutti i keyframe per le animazioni di entrata e uscita (es. `fadeIn`, `scaleUp`, `bounceIn`, `fadeOut`, `scaleDown`, `bounceOut`, ecc.).
*   **`extend.animation`:** Mappa i keyframe a nomi di animazione utilizzabili come classi Tailwind (es. `animate-fade-in`).

### `src/globals.css`
*   **Variabili CSS:** Definisce le variabili CSS globali per i colori (`--background`, `--primary`, ecc.) sia per il tema chiaro che per il tema scuro.
*   **Variabili Custom:** Include `--app-opacity`, `--card-opacity`, `--card-blur`, `--custom-accent` per le impostazioni dinamiche.
*   **Classi Blur:** Definisce le classi `.blur-none`, `.blur-light`, `.blur-medium`, `.blur-heavy`.
*   **Classi Animazione:** Definisce le classi `animate-fade-in`, `animate-scale-up`, ecc., che utilizzano i keyframe definiti in `tailwind.config.ts`.

### `src/lib/utils.ts`
*   Contiene la funzione `cn` che combina `clsx` e `tailwind-merge` per gestire le classi CSS in modo condizionale e unire le classi Tailwind senza conflitti.

### `vite.config.ts`
*   **`resolve.alias`:** Configura l'alias `@` per `src`, semplificando gli import.
*   **`base: './'`:** Importante per il corretto caricamento degli asset in Electron.
*   **`build.outDir: 'dist'`:** Specifica la directory di output per la build.
*   **`define`:** Imposta `process.env.VITE_DEV_SERVER_URL` per la gestione dell'URL del server di sviluppo in Electron.

### `package.json`
*   **`scripts`:** Definisce gli script per lo sviluppo (`dev`), la build (`build`, `build:dev`), il linting (`lint`), l'anteprima (`preview`), e gli script specifici per Electron (`electron-dev`, `electron-build`, `start`, `postinstall`).
*   **`dependencies` e `devDependencies`:** Elenca tutti i pacchetti utilizzati nel progetto.
*   **`build`:** Configurazione per `electron-builder`, inclusi `appId`, `productName`, `files` da includere nella build, `directories` e `win` (target Windows con icona).

---

Questo riepilogo dovrebbe fornirti una comprensione completa e dettagliata di ogni aspetto del progetto AI Style Studio finora implementato.